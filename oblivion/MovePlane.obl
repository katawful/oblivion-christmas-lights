scn MovePlane

int i ; iterator
int y ; iterator
int bPlaneX ; use x plane?
int bPlaneZ ; use z plane?
int bPlaneY ; use y plane?
int planeChoice ; 3 bit output for choice
float red ; red
float green ; green
float blue ; blue
float outRed ; red
float outGreen ; green
float outBlue ; blue
string_var lineString ; output line string
string_var formatString ; the format string we need to append the frame count
array_var currentLED ; current LED array
array_var currentPoint ; need to pass this to get the nearest lights
array_var currentRGB ; the rgb values

float currentX ; X position
float currentZ ; Z position
float currentY ; Y position

string_var tempString
array_var iter
float temp
float temp1
string_var tempIterString

begin function {bPlaneX, bPlaneZ, bPlaneY, red, green, blue}
  let i := 1
  let lineString := ""
  let planeChoice := 0
  let ChristmasQuest.currentLight := 1

  if bPlaneX
    let planeChoice := 4
  endif
  if bPlaneZ
    let planeChoice := 2
  endif
  if bPlaneY
    let planeChoice := 1
  endif

  ; create each RGB string component for each bulb
  ; NOTE: this must always be called always, thus all math must be handled within here
  while ChristmasQuest.currentLight < 501
    ; reset values
    let currentRGB := ar_Construct StringMap
    let currentRGB["red"] := red
    let currentRGB["green"] := green
    let currentRGB["blue"] := blue
    let currentPoint := ar_Construct Array
    let currentPoint[0] := ChristmasQuest.planeX
    let currentPoint[1] := ChristmasQuest.planeZ
    let currentPoint[2] := ChristmasQuest.planeY

    ; get the currentLED array
    let tempString := ChristmasQuest.treeCoordinates[ChristmasQuest.currentLight]
    let currentLED := sv_Split tempString ","

    ; the csv from matt has a BOM character for some reason, so the first line will
    ; be broken, thus we need to skip over it
    if ChristmasQuest.currentLight == 1
      let currentX := ToNumber currentLED[1]
      let currentZ := ToNumber currentLED[2]
      let currentY := ToNumber currentLED[3]
    else
      let currentX := ToNumber currentLED[0]
      let currentZ := ToNumber currentLED[1]
      let currentY := ToNumber currentLED[2]
    endif

    ; we simply pass of the plane moving to here
    ; this function will simply find the nearest colors to the plane and show them
    ; TODO: do something better
    let currentRGB := (call GetNearLights currentPoint currentLED currentRGB planeChoice)

    ; push the string
    let outRed := currentRGB["red"]
    let outGreen := currentRGB["green"]
    let outBlue := currentRGB["blue"]
    set lineString to sv_Construct "%z%g,%g,%g,", lineString, outRed, outGreen, outBlue
    let ChristmasQuest.currentLight += 1
  loop
  ; get rid of the last comma so its a valid CSV
  let temp := (sv_Length lineString) - 1
  sv_Erase lineString temp 1

  ; update frame number
  let lineString := call AddFrame lineString

  SetFunctionValue lineString ; return value
end
