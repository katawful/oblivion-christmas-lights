scn hsluvMaxChromaLH

; max chroma for lh

;; NOTE: THE FOLLOWING IS THE COPYRIGHT NOTICE FROM THE HSLuv IMPLEMENTATION USED FOR THIS
;; PROJECT. THE TEXT IS UNCHANGE AS PER THE NOTICE

;; Lua implementation of HSLuv and HPLuv color spaces
;; Homepage: http://www.hsluv.org/
;; Copyright (C) 2019 Alexei Boronine
;; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
;; associated documentation files (the "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
;; following conditions:
;; The above copyright notice and this permission notice shall be included in all copies or substantial
;; portions of the Software.
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
;; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
;; NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

float L
float H
float minimum
float hrad
array_var bounds
array_var bound
float length
int i

begin function {L, H}
  let hrad := H / 360 * 3.1415926535 * 2
  let bounds := call hsluvGetBounds L
  ; note not big enough?
  let minimum := 1.7976931348E38
  let i := 0
  while i <= 5
    let bound := bounds[i]
    let length := bound[1] / ((rsin hrad) - bound[0] * (rcos hrad))
    if length >= 0
      if minimum <= length
        let minimum := minimum
      else
        let minimum := length
      endif
    endif
    let i += 1
  loop
  SetFunctionValue minimum
end