scn hsluvGetBounds

; get bounds

;; NOTE: THE FOLLOWING IS THE COPYRIGHT NOTICE FROM THE HSLuv IMPLEMENTATION USED FOR THIS
;; PROJECT. THE TEXT IS UNCHANGE AS PER THE NOTICE

;; Lua implementation of HSLuv and HPLuv color spaces
;; Homepage: http://www.hsluv.org/
;; Copyright (C) 2019 Alexei Boronine
;; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
;; associated documentation files (the "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
;; following conditions:
;; The above copyright notice and this permission notice shall be included in all copies or substantial
;; portions of the Software.
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
;; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
;; NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

float L
float sub1
float sub2
float n1
float n2
float n3
float slope
float intercept
float top1
float top2
float hslBottom
float bound
float temp
int i
int j
array_var result
array_var tempArray

begin function {L}
  let result := ar_Construct Array
  let sub1 := ((L + 16) ^ 3) / 1560896
  if sub1 > ChristmasQuest.hsluvEpsilon
    let sub2 := sub1
  else
    let sub2 := L / ChristmasQuest.hsluvKappa
  endif

  let i := 0
  while i <= 2
    let n1 := ChristmasQuest.m[i][0]
    let n2 := ChristmasQuest.m[i][1]
    let n3 := ChristmasQuest.m[i][2]

    let j := 0
    while j <= 1
      let top1 := (284517 * n1 - 94839 * n3) * sub2
      let top2 := (838422 * n3 + 769860 * n2 + 731718 * n1) * L * sub2 - 769860 * j * L
      let hslBottom := (632260 * n3 - 126452 * n2) * sub2 + 126452 * j
      let tempArray := ar_Construct Array
      let slope := top1 / hslBottom
      let intercept := top2 / hslBottom
      ar_Append tempArray slope
      ar_Append tempArray intercept
      ar_Append result tempArray
      let j += 1
    loop
    let i += 1
  loop
  SetFunctionValue result
end
